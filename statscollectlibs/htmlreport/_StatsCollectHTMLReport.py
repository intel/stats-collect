# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 tw=100 et ai si
#
# Copyright (C) 2022-2023 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause
#
# Authors: Adam Hawley <adam.james.hawley@intel.com>

"""This module provides the API for generating 'stats-collect' HTML reports."""

import logging
from pepclibs.helperlibs.Exceptions import Error
from statscollectlibs.htmlreport import HTMLReport, _IntroTable
from statscollectlibs.htmlreport.tabs import _CapturedOutputTabBuilder

_LOG = logging.getLogger()

class StatsCollectHTMLReport:
    """
    This class provides the API for generating 'stats-collect' HTML reports.

    'stats-collect' HTML reports consist of generic statistics tabs and specific 'stats-collect'
    tabs. The former tabs are implemented by the 'HTMLReport' class.

    This adds 'stats-collect' specific tabs to the report generated by the 'HTMLReport' class.

    Furthermore, the 'HTMLReport' class is also used by other projects to extend HTML reports with
    other tabs.
    """

    def _copy_logs(self):
        """
        Helper function for '_generate_intro_table()'. Copies log files to the outdir.
        """

        copied_paths = {}

        results_dir = self.outdir / "results"

        for res in self.rsts:
            dst_dir = results_dir / f"raw-{res.reportid}"
            src_dir = res.logs_path.relative_to(res.dirpath)
            try:
                dst_dir.mkdir(parents=True, exist_ok=True)

                logs_dst = dst_dir / src_dir
                if not logs_dst.exists():
                    HTMLReport.copy_dir(res.dirpath / src_dir, logs_dst)

            except (OSError, Error) as err:
                _LOG.warning("unable to copy log files to the generated report: %s", err)
                logs_dst = None

            if logs_dst:
                copied_paths[res.reportid] = logs_dst.relative_to(self.outdir)

        return copied_paths

    def _generate_intro_table(self, rsts):
        """
        Helper function for 'generate_stc_report()'. Generates an intro table based on results in
        'rsts'.
        """

        intro_tbl = _IntroTable.IntroTable()
        cmd_row = intro_tbl.create_row("Command", "The command run during statistics collection.")
        for res in rsts:
            cmd_row.add_cell(res.reportid, res.info.get("cmd"))

        # Add tool information.
        tinfo_row = intro_tbl.create_row("Data Collection Tool")
        for res in rsts:
            tool_info = f"{res.info['toolname'].capitalize()} version {res.info['toolver']}"
            tinfo_row.add_cell(res.reportid, tool_info)

        # Add run date.
        date_row = intro_tbl.create_row("Collection Date")
        for res in rsts:
            date_row.add_cell(res.reportid, res.info.get("date"))

        # Add duration.
        date_row = intro_tbl.create_row("Duration")
        for res in rsts:
            date_row.add_cell(res.reportid, res.info.get("duration"))

        # Add link to logs.
        log_paths = self._copy_logs()
        log_row = intro_tbl.create_row("Logs")
        for res in rsts:
            if res.reportid in log_paths:
                log_row.add_cell(res.reportid, "Logs", link=log_paths.get(res.reportid))
            else:
                log_row.add_cell(res.reportid, None)

        return intro_tbl

    def generate(self):
        """Generate a 'stats-collect' report from the results 'rsts' with 'outdir'."""

        HTMLReport.reportids_dedup(self.rsts)

        rep = HTMLReport.HTMLReport(self.outdir, self.logpath)
        captout_tbldr = _CapturedOutputTabBuilder.CapturedOutputTabBuilder(self.rsts, rep.tabs_dir,
                                                                           basedir=self.outdir)
        captout_tab = captout_tbldr.get_tab()

        tabs = [captout_tab] if captout_tab else None
        intro_tbl = self._generate_intro_table(self.rsts)
        rep.generate_report(tabs=tabs, rsts=self.rsts, intro_tbl=intro_tbl,
                            title="stats-collect report")

    def __init__(self, rsts, outdir, logpath=None):
        """Class constructor."""

        self.rsts = rsts
        self.outdir = outdir
        self.logpath = logpath
