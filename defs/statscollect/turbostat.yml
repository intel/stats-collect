# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 tw=100 et ai si
#
# Definitions for raw Turbostat statistics files.

Busy%:
    title: "Busy percent"
    descr: >-
        The proportion of time the CPU was busy executing instructions, as opposed to stying in an
        idle state (not executing instructions). In other words, this is the C0 state residency.
        Turbostat calculates it as (delta MPERF / delta TSC) * 100%.
    unit: "%"
    short_unit: "%"
    scope: "CPU"
    # This metric represents C0 residency, so categorized as a C-state.
    categories: ["C-state", "Hardware"]
Bzy_MHz:
    title: "Busy frequency"
    descr: >-
        The average CPU frequency in C0 state (C0 state is the state when the CPU executes
        instructions, as opposed to an idle state, where the CPU does not execute instructions).
        Turbostat calculates it as (delta APERF / delta MPERF) * 100%.
    unit: "megahertz"
    short_unit: "MHz"
    scope: "CPU"
    categories: ["Frequency", "CPU"]
Avg_MHz:
    title: "Average frequency"
    descr: >-
        The average CPU frequency. Includes both idle and non-idle periods. Turbostat calculates it
        as (delta APERF / delta TSC) * 100%.
    unit: "megahertz"
    short_unit: "MHz"
    scope: "CPU"
    categories: ["Frequency", "CPU"]
UncMHz:
    title: "Uncore frequency"
    descr: >-
        Instantaneous samples of the uncore frequency. Turbostat reads them from sysfs files at
        '/sys/devices/system/cpu/intel_uncore_frequency/'.
    unit: "megahertz"
    short_unit: "MHz"
    scope: "package"
    categories: ["Frequency", "Uncore"]
UMHzX.Y:
    title: "Uncore frequency (domain {groups[0]}, cluster {groups[1]})"
    descr: >-
        Instantaneous samples of the uncore frequency for TPMI domain {groups[0]} cluster
        {groups[1]}. Turbostat reads them from sysfs files at
        '/sys/devices/system/cpu/intel_uncore_frequency/'.
    unit: "megahertz"
    short_unit: "MHz"
    scope: "package"
    categories: ["Frequency", "Uncore"]
    patterns:
        - 'UMHz(\d+).(\d+)'
CPU%cx:
    title: "C{GROUPS[0]} residency"
    descr: >-
        The percentage of time spent in core {GROUPS[0]} hardware C-state.
    type: "float"
    unit: "%"
    short_unit: "%"
    scope: "core"
    categories: ["C-state", "Hardware"]
    patterns:
        - 'CPU%(c\d+)'
Mod%cx:
    title: "M{GROUPS[0]} residency"
    descr: >-
        The percentage of time spent in module {GROUPS[0]} hardware C-state.
    type: "float"
    unit: "%"
    short_unit: "%"
    scope: "module"
    categories: ["C-state", "Hardware"]
    patterns:
        - 'Mod%(c\d+)'
Pkg%pcx:
    title: "P{GROUPS[0]} residency"
    descr: >-
        The percentage of time spent in package {GROUPS[0]} hardware C-state.
    type: "float"
    unit: "%"
    short_unit: "%"
    scope: "package"
    categories: ["C-state", "Hardware"]
    patterns:
        - 'Pkg%p(c\d+)'
        - 'Pk%p(c\d+)'
Cx:
    title: "{groups[0]} requests count"
    descr: >-
        The number times Linux requested the {groups[0]} C-state during the measurement interval.
    type: "float"
    scope: "CPU"
    categories: ["C-state", "Requested"]
    patterns:
        - '(POLL)'
        - '(C\d+[ESP]*)'
Cx%:
    title: "{groups[0]} residency"
    descr: >-
        The percentage of time the CPU spent in the {groups[0]} requestable C-state. Note, this
        number does not come from the hardware, it is calculated by Linux.
    type: "float"
    unit: "%"
    short_unit: "%"
    scope: "CPU"
    categories: ["C-state", "Requested"]
    patterns:
        - '(POLL)%'
        - '(C\d+[ESP]*)%'
CorWatt:
    title: "Core power"
    descr: >-
        RAPL CPU core power.
    type: "float"
    unit: "Watt"
    short_unit: "W"
    scope: "core"
    categories: ["Power"]
PkgWatt:
    title: "Package(s) power"
    descr: >-
        RAPL package(s) power. On multi-package systems, this is the sum of RAPL package power for
        all packages.
    type: "float"
    unit: "Watt"
    short_unit: "W"
    scope: "package"
    categories: ["Power"]
PkgWatt%TDP:
    title: "Package(s) power as percentage of TDP"
    descr: >-
        RAPL package(s) power as a percentage of TDP. RAPL package power is retrieved from the
        "PkgWatt" turbostat column. TDP is retrieved from the turbostat header. On multi-package
        systems, the values for "TDP" and "PkgWatt" are the sum of the values for all packages.
    type: "float"
    unit: "%"
    short_unit: "%"
    scope: "package"
    categories: ["Power"]
GFXWatt:
    title: "Graphics power"
    descr: >-
        RAPL graphics power.
    type: "float"
    unit: "Watt"
    short_unit: "W"
    scope: "package"
    categories: ["Power"]
RAMWatt:
    title: "RAM power"
    descr: >-
        RAPL RAM power.
    type: "float"
    unit: "Watt"
    short_unit: "W"
    scope: "package"
    categories: ["Power"]
CoreTmp:
    title: "Core temperature"
    descr: >-
        Core temperature. Reported by the per-core Digital Thermal Sensor.
    type: "float"
    unit: "degrees C"
    short_unit: "°C"
    scope: "core"
    categories: ["Temperature"]
PkgTmp:
    title: "Package temperature"
    descr: >-
        Package temperature. Reported by the per-package Package Thermal Monitor.
    type: "float"
    unit: "degrees C"
    short_unit: "°C"
    scope: "package"
    categories: ["Temperature"]
IRQ:
    title: "Interrupts"
    descr: >-
        The number of interrupts serviced by all CPUs.
    type: "int"
    scope: "CPU"
    categories: ["Interrupts"]
SMI:
    title: "System management interrupts"
    descr: >-
        The number of system management interrupts serviced by the system.
    type: "int"
    scope: "CPU"
    categories: ["Interrupts"]
IPC:
    title: "Instructions per cycle"
    descr: >-
        The number of instructions executed per-cycle by a CPU.
    type: "int"
    scope: "CPU"
    categories: ["Instructions"]
Time:
    title: "Time Elapsed"
    descr: >-
        Time elapsed since the start of the measurements. Derived from the "Time_Of_Day_Seconds"
        turbostat column.
    original_name: "Time_Of_Day_Seconds"
    unit: "second"
    short_unit: "s"
